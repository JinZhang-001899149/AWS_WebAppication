package com.cloud.assignment.assignment.Note;
//

import com.cloud.assignment.assignment.webSource.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Optional;
import java.util.UUID;

@RestController
public class NoteController {
    @Autowired // This means to get the bean called noteRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private NoteRepository noteRepository;


//    @GetMapping(path="/add") // Map ONLY GET Requests
//    public @ResponseBody String addNewNote (@RequestParam String name, @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }

    @GetMapping(path = "/note")
    public @ResponseBody
    Iterable <Note> getAllNote(@RequestHeader String Authorization,  Note newNote, HttpServletResponse response, User newUser) {

        // This returns a JSON or XML with the users
        //if(!newNote.getEmail().equals())
        if(newNote.getEmail().equals(newUser.getEmail())) {

            response.setStatus(200);
            return noteRepository.findAll();
        }

        else {

            response.setStatus(401);
            //return "(\"Unauthorized\")";
            return null;

        }

    }


    @PostMapping("/note/create")
    public @ResponseBody
    String register(@RequestBody Note newNote, HttpServletResponse response, User newUser) {


        if(newNote.getEmail().equals(newUser.getEmail())) {

            if(newNote.getTitle().equals(null) && newNote.getContent().equals(null) && newNote.getTitle().length()<=20)
            {
              response.setStatus(400);
              return "(\"Bad Request\")";
            }

            else {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");

                //newNote.setNoteId(UUID.randomUUID());

                newNote.setNoteId(UUID.randomUUID().toString());

                newNote.setCreated_on(sdf.format(new Date()));

                // get the create date for later use
                String createdate = newNote.getCreated_on();

                newNote.setLast_updated_on(sdf.format(new Date()));

                //newNote.setEmail(newNote.getEmail());


                //User newuser = new User();

                //newNote.setEmail(newuser.getEmail());

                response.setStatus(200);
                noteRepository.save(newNote);
                return "(\"saved\")";
            }

        }


        else {

            response.setStatus(401);
            return "(\"Unauthorized\")";
        }


    }

   @RequestMapping(value = "/note/{id}", method = RequestMethod.GET)
    public Note getSingleNote(@PathVariable("id") UUID id, HttpServletResponse response) {
       ArrayList<Note> list = (ArrayList<Note>) noteRepository.findAll();
       for (Note note : list) {
           if (note.getNoteId().equals(id)) {
               response.setStatus(200);
               return note;
              // return singleNote;

           } else {
               response.setStatus(404);
               return null;
           }
       }
          return null;
   }

}
