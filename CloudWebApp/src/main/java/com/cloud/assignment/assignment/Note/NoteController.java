package com.cloud.assignment.assignment.Note;
//

import com.cloud.assignment.assignment.webSource.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Optional;
import java.util.UUID;

@RestController
public class NoteController {
    @Autowired // This means to get the bean called noteRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private NoteRepository noteRepository;


//    @GetMapping(path="/add") // Map ONLY GET Requests
//    public @ResponseBody String addNewNote (@RequestParam String name, @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }

    @GetMapping(path = "/note")
    public @ResponseBody
    Iterable<Note> getAllNote() {
        // This returns a JSON or XML with the users
        return noteRepository.findAll();
    }


    @PostMapping("/note/create")
    public @ResponseBody
    String register(@RequestBody Note newNote, HttpServletResponse response) {


        SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");

        //newNote.setNoteId(UUID.randomUUID());

        newNote.setNoteId(UUID.randomUUID().toString());

        newNote.setCreated_on(sdf.format(new Date()));

        // get the create date for later use
        String createdate = newNote.getCreated_on();

        newNote.setLast_updated_on(sdf.format(new Date()));

        //newNote.setEmail(newNote.getEmail());


        //User newuser = new User();

        //newNote.setEmail(newuser.getEmail());


        noteRepository.save(newNote);

        response.setStatus(200);

        return ("saved");


    }

   @RequestMapping(value = "/note/{id}", method = RequestMethod.GET)
    public Note getSingleNote(@PathVariable("id") String id, HttpServletResponse response) {
       ArrayList<Note> list = (ArrayList<Note>) getAllNote();
       for (Note note : list) {
           if (note.getNoteId().equals(id)) {
               response.setStatus(200);
               return note;

           } else {
               response.setStatus(404);
               return null;
           }
       }
          return null;
   }

    @RequestMapping(value="/note/{noteId}",method=RequestMethod.PUT)
    public String update(@PathVariable String noteId,@RequestBody Note note){
        ArrayList<Note> noteList = (ArrayList<Note>) getAllNote();

        String realId = noteId.substring(1,noteId.length()-1);

        Note note2 = new Note();
        for(int i=0;i<noteList.size();i++){
            if(realId.equals(noteList.get(i).getNoteId())){
                note2 = noteList.get(i);


                SimpleDateFormat updateTime = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");
                note2.setLast_updated_on(updateTime.format(new Date()));
                note2.setTitle(note.getTitle());
                note2.setContent(note.getContent());
                //noteRepository.save(note2);

                return note2.getContent();
            }
        }



        return "end";
    }
}
