{
	"Description": "NetworkStack",
	"Resources": {
		"WebServerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"Tags": [
					{
						"Key": "Web",
						"Value": "web"
					}
				],
				"GroupName": "csye6225-webapp",
				"GroupDescription": "Enable HTTP access via port 80, SSH access via port 22, HTTPS access via port 443",
				"VpcId": {
					"Ref": "vpcId"
				},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},

		"DBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "vpcId"
				},
				"Tags": [
					{
						"Key": "dbs",
						"Value": "dbs"
					}
				],
				"GroupDescription": "Enable HTTP access via port 3306 port 3306 for MySQL or whatever port only from the webapp security group.",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "3306",
						"SourceSecurityGroupId": {
							"Ref": "WebServerSecurityGroup"
						}
					}
				]
			}
		},

		"EC2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Ref": "ImageId"
				},
				"InstanceType": "t2.micro",
				"DisableApiTermination": "false",
				"KeyName": "csye6225",
				"SecurityGroupIds": [
					{
						"Ref": "WebServerSecurityGroup"
					}
				],
				"SubnetId": {
					"Ref": "publicsubnet1"
				},
				"Tags": [
					{
						"Key": "Group",
						"Value": "ec2-instances"
					},

                    {
                    "Key": "Name",
                    "Value": "csye6225_Instance"
                    }
                ],
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sdm",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "20",
							"DeleteOnTermination": "true"
						}
					}
				],
				"IamInstanceProfile": {
					"Ref": "AttachRoleInstanceProfile"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash\n",
								"sudo service codedeploy-agent start\n",
								"sudo service codedeploy-agent status\n",
								{
									"Fn::Join": [
										"",
										[
											"sudo echo \"RDS=\\\"",
											{
												"Fn::GetAtt": [
													"DBInstance",
													"Endpoint.Address"
												]
											},
											"\\\"\" >> /home/centos/mysqlsetting.txt \n"
										]
									]
								}
							]
						]
					}
				}
			}
		},

		"AttachRoleInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "CodeDeployEC2ServiceRole"
					}
				]
			}
		},
		"DynamoDBTable": {
			"Type": "AWS::DynamoDB::Table",
			"Properties": {
				"AttributeDefinitions": [
					{
						"AttributeName": "id",
						"AttributeType": "S"
					}
				],
				"KeySchema": [
					{
						"AttributeName": "id",
						"KeyType": "HASH"
					}
				],
				"ProvisionedThroughput": {
					"ReadCapacityUnits": "5",
					"WriteCapacityUnits": "5"
				},
				"TableName": "csye6225"
			}
		},
		"DBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "Subnet for RDS instances",
				"DBSubnetGroupName": "SubnetGrouop",
				"SubnetIds": [
					{
						"Ref": "publicsubnet1"
					},
					{
						"Ref": "publicsubnet2"
					}
				]
			}
		},
		"DBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"AllocatedStorage": "100",
				"DBName": "csye6225",
				"Engine": "MySQL",
				"DBInstanceClass": "db.t2.medium",
				"DBInstanceIdentifier": "csye6225-spring2019",
				"VPCSecurityGroups": [
					{
						"Ref": "DBSecurityGroup"
					}
				],
				"MasterUsername": "csye6225master",
				"MasterUserPassword": "csye6225password",
				"MultiAZ": "false",
				"PubliclyAccessible": "true",
				"DBSubnetGroupName": {
					"Ref": "DBSubnetGroup"
				}
			}
		},
		"CodeDeployEC2ServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "CodeDeployEC2ServiceRole",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole",
					{
						"Fn::ImportValue": "CodeDeployEC2S3"
					},
					{
						"Fn::ImportValue": "accessS3"
					}
				]
			}
		},
		"CodeDeployServiceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "CodeDeployServiceRole",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"codedeploy.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole",
					{
						"Fn::ImportValue": "CodeDeployEC2S3"
					}
				]
			}
		},
		"CodeDeployApplication": {
			"Type": "AWS::CodeDeploy::Application",
			"Properties": {
				"ComputePlatform": "Server",
				"ApplicationName": "csye6225-webapp"
			}
		},
		"CodeDeploymentGroup": {
			"Type": "AWS::CodeDeploy::DeploymentGroup",
			"Properties": {
				"ApplicationName": {
					"Ref": "CodeDeployApplication"
				},
				"DeploymentGroupName": "csye6225-webapp-deployment",
				"ServiceRoleArn": {
                                      "Fn::GetAtt":[
					 "CodeDeployServiceRole",
                                         "Arn"
                                     ]
				},
				"DeploymentStyle": {
					"DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
					"DeploymentType": "IN_PLACE"
				},
				"Ec2TagFilters": [
					{
						"Type": "KEY_AND_VALUE",
						"Key": "Group",
						"Value": "ec2-instances"
					}
				],
				"DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
				"AutoRollbackConfiguration": {
					"Enabled": "true",
					"Events": [
						"DEPLOYMENT_FAILURE"
					]
				}
			}
		}
	},
	"Parameters": {
		"vpcId": {
			"Type": "String"
		},
		"ImageId" : {
			"Type": "String"
		},
		"publicsubnet1": {
			"Type": "String"
		},
		"publicsubnet2": {
			"Type": "String"
		},
		"publicsubnet3": {
			"Type": "String"
		},
		"circleci": {
			"Type": "String"
		}
	}

}
