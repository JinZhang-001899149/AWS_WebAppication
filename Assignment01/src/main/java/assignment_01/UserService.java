package assignment_01;

import ch.qos.logback.core.joran.conditional.ThenAction;
import com.fasterxml.jackson.annotation.JsonAlias;
import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;


//@Controller    // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's sta
@RestController
public class UserService {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping("/api/add/") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser(@RequestParam String password
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setPassword(password);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping("/api/all/")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping("/api/user/register")
    public @ResponseBody
    String

    register(@RequestBody User newUser) {


        //get users from database
        ArrayList<User> list = (ArrayList<User>) getAllUsers();


         if(list.size()==0){
             if (
                     newUser.getPassword().matches(".*[a-zA-Z].*") &&
                             newUser.getPassword().matches(".*[0-9].*") &&
                             newUser.getPassword().length() >= 8 &&
                             newUser.getPassword().length() <= 20) {


                 // BCrypt
                 String password = newUser.getPassword();
                 String hashed = BCrypt.hashpw(password, BCrypt.gensalt(5));
                 newUser.setPassword(hashed);
                 //create token
                 String token = newUser.getEmail() + ":" + hashed;

                 Base64 base64 = new Base64();
                 String result = base64.encodeToString(token.getBytes());

                 newUser.setToken(result);

                 userRepository.save(newUser);

                 return result + "\n" + "{\"Sucessfully Registered\"}";

             }else {
                 return "{\"password invalid, The password must containing letters and numbers\"}";

             }

         }else {

             for (User user : list) {
                 if (user.getEmail().equals(newUser.getEmail())) {
                     return "exist";
                 } else if (
                         newUser.getPassword().matches(".*[a-zA-Z].*") &&
                                 newUser.getPassword().matches(".*[0-9].*") &&
                                 newUser.getPassword().length() >= 8 &&
                                 newUser.getPassword().length() <= 20) {


                     // BCrypt
                     String password = newUser.getPassword();
                     String hashed = BCrypt.hashpw(password, BCrypt.gensalt(5));
                     newUser.setPassword(hashed);
                     //create token
                     String token = newUser.getEmail() + ":" + hashed;

                     Base64 base64 = new Base64();
                     String result = base64.encodeToString(token.getBytes());

                     newUser.setToken(result);
//            //Bcrypt
//            String password = newUser.getPassword();
//            String hashed = BCrypt.hashpw(password);


                     // the format of the password is correct and make it into Bcrypt token then save the user
                     userRepository.save(newUser);


                     // return the token and tell user successfully registered
                     //return result+" " + System.currentTimeMillis();

                     return result + "\n" + "{\"Sucessfully Registered\"}";


                     //return "{\"Valid Password\"}";

                 }


//        else if(newUser.getPassword().equals("Fang")) {
//
//
////            //Bcrypt
////
//
//        }
//
                 else {


                     //return "{\"email\":\""+newUser.getEmail()+"\", \"name\":\""+newUser.getPassword()+"\"}";


                     return "{\"password invalid, The password must containing letters and numbers\"}";

                 }

             }
         }
         return "end";
    }
}
